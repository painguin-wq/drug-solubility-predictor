# src/main.py
from src.data.process import process_solubility_data  # –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
from src.data.load_densities import load_and_process_densities  # –ù–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç
from src.features.smiles_featurizer import featurize_compounds
from src.visualization.plots import create_eda_report  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
from src.models.solubility_model import train_solubility_model, predict_optimal_conditions  # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏


def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞: ML-–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–≤–æ—Ä–∏–º–æ—Å—Ç–∏ (—Å –ø–ª–æ—Ç–Ω–æ—Å—Ç—å—é)")

    # 1. –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–æ—Ç–Ω–æ—Å—Ç–µ–π (–Ω–æ–≤—ã–π —à–∞–≥)
    load_and_process_densities()  # –°–æ—Ö—Ä–∞–Ω–∏—Ç –≤ data/processed/solvent_densities.csv

    # 2. –ó–∞–≥—Ä—É–∑–∫–∞, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø–ª–æ—Ç–Ω–æ—Å—Ç–µ–π —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    df = process_solubility_data()  # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é

    # 3. –§–∏—á–∏
    df = featurize_compounds(df)
    df.to_csv("data/processed/solubility_with_features_and_density.csv", index=False)
    print("üíæ –î–∞–Ω–Ω—ã–µ —Å —Ñ–∏—á–∞–º–∏ –∏ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")

    # 4. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è (—É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ plots.py –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏)
    # create_eda_report() # –ú–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏

    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

    # 5. –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    train_solubility_model(df)  # <-- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º df –≤ —Ñ—É–Ω–∫—Ü–∏—é

    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

    # 6. –ü—Ä–∏–º–µ—Ä –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    print("\nüîç –ü—Ä–∏–º–µ—Ä –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è Iohexol (—Å –ø–ª–æ—Ç–Ω–æ—Å—Ç—å—é):")
    iohexol_smiles = "CC(=O)N(CC(O)CO)c1c(I)c(C(=O)NCC(O)CO)c(I)c(C(=O)NCC(O)CO)c1I"
    result = predict_optimal_conditions(iohexol_smiles)  # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    if isinstance(result, dict):
        print(f"–õ—É—á—à–∏–π —Ä–∞—Å—Ç–≤–æ—Ä–∏—Ç–µ–ª—å (SMILES): {result['best_solvent_smiles']}")
        print(f"–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è T: {result['best_temperature_c']:.1f} ¬∞C")
        print(f"–ü—Ä–æ–≥–Ω–æ–∑ logS: {result['predicted_logS']:.3f}")
    else:
        print(result)  # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ

    print("\n‚úÖ –ü—Ä–æ–µ–∫—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. –°–º–æ—Ç—Ä–∏—Ç–µ –ø–∞–ø–∫–∏ reports/ –∏ models/")


if __name__ == "__main__":
    main()