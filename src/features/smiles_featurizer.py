# src/features/smiles_featurizer.py
from rdkit import Chem
from rdkit.Chem import Descriptors
from rdkit.Chem import rdMolDescriptors  # <-- –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ç–æ
import pandas as pd
import numpy as np


def calculate_molecular_features(smiles):
    """
    –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–æ–ª–µ–∫—É–ª—è—Ä–Ω—ã—Ö –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–ª–∏ [np.nan] * 6 –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
    """
    try:
        mol = Chem.MolFromSmiles(smiles)
        if mol is None:
            return [np.nan] * 6

        mol_weight = Descriptors.MolWt(mol)
        logp = Descriptors.MolLogP(mol)
        tpsa = Descriptors.TPSA(mol)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è H-—Å–≤—è–∑–µ–π
        h_donors = rdMolDescriptors.CalcNumHBD(mol)  # <-- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
        h_acceptors = rdMolDescriptors.CalcNumHBA(mol)  # <-- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ

        # –ü—Ä–∞–≤–∏–ª–æ –õ–∏–ø–∏–Ω—Å–∫–∏: –ø–µ—Ä–µ—Å—á–µ—Ç –≤—Ä—É—á–Ω—É—é
        rule_of_five = int(
            (mol_weight <= 500) +
            (logp <= 5) +
            (h_donors <= 5) +
            (h_acceptors <= 10)
            >= 3)

        return [mol_weight, logp, tpsa, h_donors, h_acceptors, rule_of_five]

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ SMILES: {smiles}, {e}")
        return [np.nan] * 6


def featurize_compounds(df):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ–ª–µ–∫—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∫ DataFrame."""
    print("üî¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–ª–µ–∫—É–ª—è—Ä–Ω—ã—Ö –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤...")

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∫ –∫–∞–∂–¥–æ–º—É SMILES
    features = df['smiles'].apply(calculate_molecular_features)

    # –°–æ–∑–¥–∞–µ–º DataFrame –∏–∑ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    feature_df = pd.DataFrame(
        features.tolist(),
        columns=[
            'mol_weight',
            'logp',
            'tpsa',
            'h_donors',
            'h_acceptors',
            'rule_of_five'
        ]
    )

    # –ö–æ–Ω–∫–∞—Ç–µ–Ω–∏—Ä—É–µ–º —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º DataFrame
    df_result = pd.concat([df.reset_index(drop=True), feature_df], axis=1)

    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(feature_df.columns)} –º–æ–ª–µ–∫—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
    return df_result