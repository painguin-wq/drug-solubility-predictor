# src/predict.py

from src.models.solubility_model import predict_optimal_conditions

def main():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å –∏ –¥–µ–ª–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ SMILES.
    """
    print("üöÄ –≠—Ç–∞–ø 2: –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏...")

    test_smiles = "CN1C=NC2=C1C(=O)N(C(=O)N2C)C"  # –ö–æ—Ñ–µ–∏–Ω

    print(f"\n–ê–Ω–∞–ª–∏–∑ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å–æ SMILES: {test_smiles}")

    result = predict_optimal_conditions(test_smiles)

    if isinstance(result, dict):
        print("\n--- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ ---")
        print(f"SMILES: {result['smiles']}")
        print(
            f"–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è: –†–∞—Å—Ç–≤–æ—Ä–∏—Ç–µ–ª—å {result['best_solvent_smiles']} –ø—Ä–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ {result['best_temperature_c']:.1f} ¬∞C"
        )
        print(f"–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π logS: {result['predicted_logS']:.3f}")
        print(f"–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è —Ä–∞—Å—Ç–≤–æ—Ä–∏–º–æ—Å—Ç—å: {result['predicted_solubility_mol_per_l']:.6f} –º–æ–ª—å/–ª")

        print("\n--- –¢–æ–ø-5 —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö —É—Å–ª–æ–≤–∏–π ---")
        for i, cond in enumerate(result['top_5_conditions']):
            # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º –≤—ã–≤–æ–¥ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ ---
            print(
                f"  {i + 1}. –†–∞—Å—Ç–≤–æ—Ä–∏—Ç–µ–ª—å: {cond['solvent_smiles']:<10} "
                f"| T: {cond['temp_c']:>5.1f} ¬∞C "
                f"| logS: {cond['log_s']:.3f}"
            )
    else:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {result}")

    print("\n‚úÖ –≠—Ç–∞–ø –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à—ë–Ω.")


if __name__ == "__main__":
    main()